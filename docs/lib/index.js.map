{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/Quad.js",
    "src/Shaders.js",
    "src/Sprite.js",
    "src/SpriteBatch.js",
    "src/index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\n *  Quad class\n *  pos represents the un-transformed vertex coordinates.\n *  uv represents the texture coordinates (source rect from texture & normal map)\n *  We could define different quads for different regions of a texture atlas\n */\nvar Quad = function( info )\n{\n\tthis.pos = info.pos || [\n\t\t-1.0,  1.0,\n\t\t-1.0, -1.0,\n\t\t 1.0, -1.0,\n\t\t 1.0,  1.0\n\t];\n\tthis.uv = info.uv || [\n\t\t0.0, 0.0,\n\t\t0.0, 1.0,\n\t\t1.0, 1.0,\n\t\t1.0, 0.0\n\t];\n};\n\nmodule.exports = {\n\tQuad\n};",
    "const vertexShaderSource = `\n//  Textured, lit, normal mapped vert shader\nprecision mediump float;\n\nattribute vec2 aPosition;\t\t// 2D position\nattribute vec2 aTexCoord;\t\t// Texture & normal map coords\nattribute float aRotation;\t\t// Indicates rotation of sprite - must set for each vertex\n\nuniform float uSceneWidth;\t\t// Width, height of scene - used to transform\nuniform float uSceneHeight;\t\t//   world coords to normalized device coords.\nuniform float uAspect;\t\t\t// Aspect ratio of canvas\nuniform vec3 uLightDir;\t\t\t// Application can set desired light direction\n\nvarying vec2 vTexCoord;\t\t\t// Passed through to frag shader\nvarying vec3 vLightDir;\t\t\t// Compute transformed light dir for frag shader\n\nvoid main(void)\n{\n    vTexCoord = aTexCoord;\t// frag shader needs texcoord\n\n    // Figure out light direction relative to this rotated vertex.\n    // Simply rotate the light dir by negative vertex rotation.\n    float cosR = cos(-aRotation);\n    float sinR = sin(-aRotation);\n    vLightDir.x = (uLightDir.x * cosR - uLightDir.y * sinR) * uAspect;  // correct for aspect ratio\n    vLightDir.y = uLightDir.x * sinR + uLightDir.y * cosR;\n    vLightDir.z = uLightDir.z;\n    // Finally normalize it so the frag shader can use it without any further adjustments\n    vLightDir = normalize(vLightDir);\n\n    // Since we're working in 2D, we can do a simple 2D scale to normalized device coords (from -1..1)\n    // (no need for a full blown proj/modelview matrix multiply)\n    gl_Position.x = aPosition.x / uSceneWidth;\n    gl_Position.y = aPosition.y / uSceneHeight;\n    gl_Position.z = 0.5;  // z should be from 0..1\n    gl_Position.w = 1.0;  // no perspective\n}\n`;\n\nconst fragmentShaderSource = `\n//  Textured, lit, normal mapped frag shader\nprecision mediump float;\n\n// uniforms from app\nuniform sampler2D uSamplerD;\t// diffuse texture map\nuniform sampler2D uSamplerN;\t// normal texture map\nuniform vec3 uLightColor;\t\t// directional light color\nuniform vec3 uAmbientColor;\t\t// ambient light color\n\n// interpolated values from vertex shader\nvarying vec2 vTexCoord;\nvarying vec3 vLightDir;\n\nvoid main()\n{\n    // get the color values from the texture and normalmap\n    vec4 clrDiffuse = texture2D(uSamplerD, vTexCoord);\n    vec3 clrNormal = texture2D(uSamplerN, vTexCoord).rgb;\n\n    // scale & normalize the normalmap color to get a normal vector for this texel\n    vec3 normal = normalize(clrNormal * 2.0 - 1.0);\n\n    // Calc normal dot lightdir to get directional lighting value for this texel.\n    // Clamp negative values to 0.\n    vec3 litDirColor = uLightColor * max(dot(normal, vLightDir), 0.0);\n\n    // add ambient light, then multiply result by diffuse tex color for final color\n    vec3 finalColor = (uAmbientColor + litDirColor) * clrDiffuse.rgb;\n\n    // finally apply alpha of texture for the final color to render\n    gl_FragColor = vec4(finalColor, clrDiffuse.a);\n}\n`;\n\nmodule.exports = {\n    vertexShaderSource,\n    fragmentShaderSource\n}",
    "/**\n *  Sprite class\n *  An instance to be displayed on the screen.\n *  We can have many sprite instances sharing the same Quad definition.\n */\nvar Sprite = function( info )\n{\n\tthis.quad = info.quad || null;\n\tthis.pos = {x:info.x, y:info.y};\n\tthis.rot = info.rot || 0.0;\n};\n\nmodule.exports = {\n\tSprite\n};",
    "/**\n *  Batch renderer class for normal-mapped sprites (quads)\n *  Allows individual position, rotation for each.\n *  Note that this Batch implementation must know about the shader,\n *  what its attribs and uniforms are.\n */\nlet SpriteBatch = function( info )\n{\n\tthis.lightDir = info.lightDir;\n\tthis.gl = info.gl;\n\tthis.bufsize = info.bufsize || 16;\t\t// Number of sprites to allocate for\n\tthis.shader = info.shader;\t\t\t\t// The shader to use for this layer\n\tthis.texture = info.texture || null;\t// Texture\n\tthis.normap = info.normap || null;\t\t// Normal Map\n\tthis.arr_pos = new Float32Array(this.bufsize * 2 * 4);\t// Array of all sprite vertex positions\n\tthis.arr_rot = new Float32Array(this.bufsize * 1 * 4);\t// Array of all sprite rotations\n\tthis.arr_uv = new Float32Array(this.bufsize * 2 * 4);\t// Array of all sprite UVs\n\tthis.arr_id = new Uint16Array(this.bufsize * 6);\t\t// Array of all indices\n\tthis.subArr_pos = null;\t\t// These are the ranges of elements in the above arrays that we\n\tthis.subArr_rot = null;\t\t//  will need to update and send to the card again.\n\tthis.subArr_uv = null;\n\n\t//  Pre-fill index buffer as it will not change - all sprites have 6 indices (4 vtx shared for 2 tris)\n\tfor( var i = 0; i < this.bufsize; ++i )\n\t{\n\t\tthis.arr_id[i * 6 + 0] = i * 4 + 0;\n\t\tthis.arr_id[i * 6 + 1] = i * 4 + 1;\n\t\tthis.arr_id[i * 6 + 2] = i * 4 + 2;\n\t\tthis.arr_id[i * 6 + 3] = i * 4 + 2;\n\t\tthis.arr_id[i * 6 + 4] = i * 4 + 3;\n\t\tthis.arr_id[i * 6 + 5] = i * 4 + 0;\n\t}\n\n\tthis.sprites = new Array();\t\t\t\t// Array of Sprites\n\tthis.spritesChanged = false;\t\t\t// Check flag every frame - if changed, will need to re-fill buffers\n\n\tthis.gl.useProgram(this.shader.prog);\n\n\t//  Enable the attributes\n\tthis.gl.enableVertexAttribArray(this.shader.attribs.pos);\n\tthis.gl.enableVertexAttribArray(this.shader.attribs.rot);\n\tthis.gl.enableVertexAttribArray(this.shader.attribs.uv);\n\n\t//  Must fill with data. Setup vertex buffers...\n\tthis.buf_pos = this.gl.createBuffer();\t\t// GL vertex buffer position (xy)\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buf_pos);\n\tthis.gl.vertexAttribPointer(this.shader.attribs.pos, 2, this.gl.FLOAT, false, 0, 0);\n\tthis.gl.bufferData(this.gl.ARRAY_BUFFER, this.arr_pos, this.gl.DYNAMIC_DRAW);\n\n\tthis.buf_rot = this.gl.createBuffer();\t\t// GL vertex buffer rotation (r)\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buf_rot);\n\tthis.gl.vertexAttribPointer(this.shader.attribs.rot, 1, this.gl.FLOAT, false, 0, 0);\n\tthis.gl.bufferData(this.gl.ARRAY_BUFFER, this.arr_rot, this.gl.DYNAMIC_DRAW);\n\n\tthis.buf_uv = this.gl.createBuffer();\t\t// GL vertex buffer texcoord (uv)\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buf_uv);\n\tthis.gl.vertexAttribPointer(this.shader.attribs.uv, 2, this.gl.FLOAT, false, 0, 0);\n\tthis.gl.bufferData(this.gl.ARRAY_BUFFER, this.arr_uv, this.gl.DYNAMIC_DRAW);\n\n\tthis.buf_id = this.gl.createBuffer();\t\t// Array of all indices\n\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.buf_id);\n\tthis.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.arr_id, this.gl.STATIC_DRAW);\n\n\t//  Initial uniform values\n\tconst width = 1.0;\n\tconst height = 1.0;\n\tthis.gl.uniform1f(this.shader.uniforms.sceneWidth, width);\n\tthis.gl.uniform1f(this.shader.uniforms.sceneHeight, height);\n\tthis.gl.uniform1f(this.shader.uniforms.aspect, canvas.width / canvas.height);\n\tthis.gl.uniform3fv(this.shader.uniforms.lightDir, this.lightDir);\n\tthis.gl.uniform3fv(this.shader.uniforms.lightColor, new Float32Array([1.0, 1.0, 1.0]));\n\tthis.gl.uniform3fv(this.shader.uniforms.ambientColor, new Float32Array([0.0, 0.0, 0.2]));\n\n\tvar e = this.gl.getError();\n\tif( e !== this.gl.NO_ERROR )\n\t\tconsole.error(\"GL error: \"+e);\n};\n\nSpriteBatch.prototype.addSprite = function( sprite )\n{\n\tif( this.sprites.length >= this.bufsize )\n\t{\n\t\t// TODO: Should re-allocate larger arrays\n\t\tconsole.log(\"Can't add sprite - buffer full.\");\n\t\treturn;\n\t}\n\n\tthis.sprites.push(sprite);\n\t// recompute the sub-array ranges\n\tvar n = this.sprites.length;\n\tthis.subArr_pos = this.arr_pos.subarray(0, n * 4 * 2);\n\tthis.subArr_rot = this.arr_rot.subarray(0, n * 4 * 1);\n\tthis.subArr_uv = this.arr_uv.subarray(0, n * 4 * 2);\n\tthis.spritesChanged = true;\t// flags that we need to re-fill buffer data\n};\n\nSpriteBatch.prototype.removeSprite = function( sprite )\n{\n\t// find this sprite in our array and remove it\n\tvar i = this.sprites.indexOf(sprite);\n\tif( i >= 0 )\n\t{\n\t\tthis.sprites.splice(i, 1);\n\t\tvar n = this.sprites.length;\n\t\tthis.subArr_pos = this.arr_pos.subarray(0, n * 4 * 2);\n\t\tthis.subArr_rot = this.arr_uv.subarray(0, n * 4 * 1);\n\t\tthis.subArr_uv = this.arr_uv.subarray(0, n * 4 * 2);\n\t\tthis.spritesChanged = true;\n\t}\n\telse\n\t{\n\t\tconsole.error(\"Can't remove Sprite - not found in this Batch\");\n\t}\n};\n\nSpriteBatch.prototype.removeAllSprites = function()\n{\n\tthis.sprites = [];\n\tthis.spritesChanged = false;\n};\n\n/**\n *  This function takes our \"user-friendly\" list of sprites with position & rotation values,\n *  and does the grunt work of filling vertex buffers with transformed coordinates.\n *  Though it might seem like a lot of work for javascript to be doing, computing a matrix for each\n *  sprite and only rendering one sprite at a time would be far less efficient!\n *  This way we can render all the sprites in one big batch.\n */\nSpriteBatch.prototype.render = function()\n{\n\tvar i,\n\t\tnum = this.sprites.length;\n\tif( num < 1 )\n\t\treturn;\t// nothing to render\n\n\tvar i, j, o,\n\t\tp, x, y, r,\n\t\trc, rs,\n\t\tap = this.arr_pos,\t// shorthand for arrays - one less level of indirection\n\t\tar = this.arr_rot,\n\t\tuv = this.arr_uv,\n\t\tsprite;\n\n\t//  Fill buffer with recomputed position, rotation vertices\n\tfor( i = 0; i < num; ++i )\n\t{\n\t\tsprite = this.sprites[i];\n\t\tp = sprite.quad.pos;\n\t\tx = sprite.pos.x;\n\t\ty = sprite.pos.y;\n\t\tr = sprite.rot;\n\t\trc = Math.cos(r);\n\t\trs = Math.sin(r);\n\n\t\t// translate and rotate each of this quad's verticies by this sprite's pos & rot\n\t\to = i * 2 * 4;  // offset to vertex array\n\t\tap[o+0] = p[0] * rc - p[1] * rs + x;\n\t\tap[o+1] = p[0] * rs + p[1] * rc + y;\n\t\tap[o+2] = p[2] * rc - p[3] * rs + x;\n\t\tap[o+3] = p[2] * rs + p[3] * rc + y;\n\t\tap[o+4] = p[4] * rc - p[5] * rs + x;\n\t\tap[o+5] = p[4] * rs + p[5] * rc + y;\n\t\tap[o+6] = p[6] * rc - p[7] * rs + x;\n\t\tap[o+7] = p[6] * rs + p[7] * rc + y;\n\n\t\t// send through the rotation angle to be used by the normal map lighting calculation\n\t\to = i * 4;  // offset to rotation array\n\t\tfor( j = 0; j < 4; ++j )\n\t\t\tar[o+j] = r;\n\t}\n\n\t//  We only need to update texcoord buffer if sprites list changed\n\tif( this.spritesChanged )\n\t{\n\t\tfor( i = 0; i < num; ++i )\n\t\t{\n\t\t\tp = this.sprites[i].quad.uv;\n\t\t\to = i * 2 * 4;  // offset to uv array\n\t\t\tuv[o+0] = p[0]; uv[o+1] = p[1];\n\t\t\tuv[o+2] = p[2]; uv[o+3] = p[3];\n\t\t\tuv[o+4] = p[4]; uv[o+5] = p[5];\n\t\t\tuv[o+6] = p[6]; uv[o+7] = p[7];\n\t\t}\n\t}\n\n\tthis.gl.useProgram(this.shader.prog);\n\n\t// If the canvas were resized, we would need to update these values\n\t//var aspect = canvas.width / canvas.height;\n\t//this.gl.uniform1f(this.shader.uniforms.sceneWidth, 12.0 * aspect);\n\t//this.gl.uniform1f(this.shader.uniforms.sceneHeight, 12.0);\n\t//this.gl.uniform1f(this.shader.uniforms.aspect, aspect);\n\n\t//  Update the light direction (based on mouse position)\n\tthis.gl.uniform3fv(this.shader.uniforms.lightDir, this.lightDir);\n\n\t//  Activate the diffuse texture\n\tthis.gl.activeTexture(this.gl.TEXTURE0);\n\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n\tthis.gl.uniform1i(this.shader.uniforms.samplerD, 0);\n\n\t//  Activate the normalmap texture\n\tthis.gl.activeTexture(this.gl.TEXTURE1);\n\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.normap);\n\tthis.gl.uniform1i(this.shader.uniforms.samplerN, 1);\n\n\t//  Bind GL buffers, update with recomputed values...\n\t//  positions\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buf_pos);\n\tthis.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, this.subArr_pos);\n\tthis.gl.vertexAttribPointer(this.shader.attribs.pos, 2, this.gl.FLOAT, false, 0, 0);\n\n\t//  rotations\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buf_rot);\n\tthis.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, this.subArr_rot);\n\tthis.gl.vertexAttribPointer(this.shader.attribs.rot, 1, this.gl.FLOAT, false, 0, 0);\n\n\t//  texcoords\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buf_uv);\n\t//  Only update texcoord buffer data if sprites list changed\n\tif( this.spritesChanged )\n\t\tthis.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, this.subArr_uv);\n\tthis.gl.vertexAttribPointer(this.shader.attribs.uv, 2, this.gl.FLOAT, false, 0, 0);\n\n\t//  indices\n\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.buf_id);\n\n\t//  finally... draw!\n\tthis.gl.drawElements(this.gl.TRIANGLES, num * 6, this.gl.UNSIGNED_SHORT, 0);\n\n\tthis.spritesChanged = false;\t// reset this flag\n};\n\nmodule.exports = {\n\tSpriteBatch\n};",
    "let {vertexShaderSource, fragmentShaderSource} = require('./Shaders');\nlet {Quad} = require('./Quad');\nlet {Sprite} = require('./Sprite');\nlet {SpriteBatch} = require('./SpriteBatch');\n\n//\n//  App Globals\n//\nvar gl = null;\t\t\t\t// The WebGL object\nvar canvas = null;\t\t\t// The canvas element\nvar canvasPos = {x:0, y:0};\t// Top left of canvas\nvar shader = {\t\t\t\t// Structure to hold shader stuff\n    prog:null, attribs:null, uniforms:null\n};\nvar texDiffuse = null;\t\t// diffuse texture\nvar texNormals = null;\t\t// normal map texture\nvar numTexturesLoaded = 0;\t// counts # of textures loaded so we know when we're ready\nvar batch = null;\t\t\t// will be an instance of SpriteBatch class\nvar monkeys = [];\t\t\t// will be an array of monkey sprites to render\nvar prevT = 0;\t\t\t\t// previous frame timestamp (millisecs)\nvar lightDir = new Float32Array([0.7, 0.7, 0.7]);\t// direction of light (update by mouse movements)\n\nvar lightDirectionCanvas = document.getElementById('light-direction');\nvar lightDirectionCtx = lightDirectionCanvas.getContext('2d');\n\nfunction getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\nconst textures = [\n        'statue',\n        'couple',\n        'head',\n        'earth',\n        'me',\n        'cereal',\n        'bricks',\n        'suit',\n        'reference',\n        'shoes',\n        'jibo',\n        'jibo2',\n        'jibo3',\n    ];\nlet currentTexture;\nlet texture = getParameterByName('texture');\n\nif( texture !== null ) {\n    const textureIndex = textures.findIndex( (_texture) => _texture === texture );\n    if(textureIndex !== -1 ){\n        currentTexture = textures[textureIndex];\n    } else {\n        // Default to statue if there was no texture with the name that was specified\n        currentTexture = textures.find( (texture) => _texture === \"statue\" );\n    }\n} else {\n    // Default to statue if no texture was specified via the get parameter\n    currentTexture = textures.find( (texture) => texture === \"statue\" );\n}\n\nconst navigation = document.getElementById('navigation');\n\ntextures.forEach( (texture) => {\n    let a = document.createElement('a');\n\n    a.href = `http://${location.host + location.pathname}?texture=${texture}`;\n    a.innerHTML = `<img class=\"thumbnail\" src=\"texture/${texture}-diffuse.png\"/>`;\n    navigation.appendChild(a);\n})\n\n//\n//  Utility/helper functions\n//\nfunction El(id)\n{\n    return document.getElementById(id);\n}\n\n// Cross-browser requestAnimationFrame\nwindow.requestAnimFrame = (function() {\n    return window.requestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.oRequestAnimationFrame ||\n        window.msRequestAnimationFrame ||\n        function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n            window.setTimeout(callback, 1000/60);\n        };\n})();\n\nfunction compileShader( sh, src )\n{\n    gl.shaderSource(sh, src);\n    gl.compileShader(sh);\n\n    if( !gl.getShaderParameter(sh, gl.COMPILE_STATUS) )\n    {\n        console.error( gl.getShaderInfoLog(sh) );\n        return null;\n    }\n\n    return sh;\n}\n\n/*\n * {src} Source code of the shader.\n * {shaderType} Enumeration of either 'VertexShader' or 'FragmentShader'\n */\nfunction createShader( src, shaderType )\n{\n    var shaderScript = El(id);\n    if( !shaderScript )\n        return null;\n\n    var str = \"\";\n    var k = shaderScript.firstChild;\n    while( k )\n    {\n        if( k.nodeType === 3 )\n            str += k.textContent;\n        k = k.nextSibling;\n    }\n\n    var sh;\n    if( shaderScript.type === \"x-shader/x-fragment\" )\n        sh = gl.createShader(gl.FRAGMENT_SHADER);\n    else if ( shaderScript.type === \"x-shader/x-vertex\" )\n        sh = gl.createShader(gl.VERTEX_SHADER);\n    else\n        return null;\n\n    return compileShader(sh, str);\n}\n\nfunction makeShaderProgram ( vshader, fshader )\n{\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vshader);\n    gl.attachShader(prog, fshader);\n    gl.linkProgram(prog);\n    if( !gl.getProgramParameter(prog, gl.LINK_STATUS) )\n    {\n        console.error(\"Failed to link shader program:\", gl.getProgramInfoLog(prog));\n        return null;\n    }\n    return prog;\n}\n\n///////////////////////////////////////////////////////////\n/**\n *  Bootup function - Called after page loads\n *  Inits WebGL, shaders, starts textures loading.\n */\nfunction init()\n{\n    if( gl ) return;  // already init'ed\n\n    if( !(canvas = El('canvas')) )\n    {\n        alert(\"canvas element not found in page!\");\n        return;\n    }\n\n    // Init WebGL...\n    if( (gl = canvas.getContext(\"webgl\")) )\n        console.log(\"webgl context acquired\");\n    else if( (gl = canvas.getContext(\"experimental-webgl\")) )\n        console.log(\"experimental-webgl context acquired\");\n    else\n    {\n        console.error(\"Failed to acquire a WebGL context\");\n        alert(\"WebGL not available.\");\n        return;\n    }\n\n    var rc = canvas.getBoundingClientRect();\n    canvasPos.x = rc.left;\n    canvasPos.y = rc.top;\n\n    // Compile shader scripts...\n    const vertexShader = compileShader( gl.createShader(gl.VERTEX_SHADER), vertexShaderSource );\n    const fragmentShader = compileShader( gl.createShader(gl.FRAGMENT_SHADER), fragmentShaderSource );\n    if( !(shader.prog = makeShaderProgram( vertexShader, fragmentShader ) ) )\n    {\n        alert(\"Failed to create shader program. Check console for errors.\");\n        return;\n    }\n\n    //  Activate the shader program\n    gl.useProgram(shader.prog);\n\n    //  Acquire shader attribs\n    shader.attribs = {\n        pos: gl.getAttribLocation(shader.prog, \"aPosition\"),\n        rot: gl.getAttribLocation(shader.prog, \"aRotation\"),\n        uv: gl.getAttribLocation(shader.prog, \"aTexCoord\")\n    };\n\n    //  Acquire shader uniforms\n    shader.uniforms = {\n        sceneWidth: gl.getUniformLocation(shader.prog, \"uSceneWidth\"),\n        sceneHeight: gl.getUniformLocation(shader.prog, \"uSceneHeight\"),\n        aspect: gl.getUniformLocation(shader.prog, \"uAspect\"),\n        samplerD: gl.getUniformLocation(shader.prog, \"uSamplerD\"),\n        samplerN: gl.getUniformLocation(shader.prog, \"uSamplerN\"),\n        lightDir: gl.getUniformLocation(shader.prog, \"uLightDir\"),\n        lightColor: gl.getUniformLocation(shader.prog, \"uLightColor\"),\n        ambientColor: gl.getUniformLocation(shader.prog, \"uAmbientColor\")\n    };\n\n    // Start loading textures...\n    texDiffuse = gl.createTexture();\n    texNormals = gl.createTexture();\n    var imgDiffuse = new Image();\n    var imgNormals = new Image();\n    imgDiffuse.onload = function() { onLoadedTexture(texDiffuse, imgDiffuse, gl.RGBA); };\n    imgDiffuse.onerror = function() { alert(\"failed to load diffuse texture.\"); };\n    imgNormals.onload = function() { onLoadedTexture(texNormals, imgNormals, gl.RGB); };\n    imgNormals.onerror = function() { alert(\"failed to load normalmap texture.\"); };\n    //  Set the img srcs AFTER the callbacks are assigned!\n\n    imgDiffuse.src = `texture/${currentTexture}-diffuse.png`;\n    imgNormals.src = `texture/${currentTexture}-normals.png`;\n    //  Exiting for now. Execution resumes in onLoadedTexture when textures load.\n}\n\n/**\n *  Callback on texture image load\n */\nfunction onLoadedTexture( tex, img, fmt )\n{\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    //gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);  // required if no mipmaps?\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\t// gl.LINEAR for smooth texture scaling\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texImage2D(gl.TEXTURE_2D, 0, fmt, fmt, gl.UNSIGNED_BYTE, img);\n    ++numTexturesLoaded;\n    if( numTexturesLoaded >= 2 )\n    {\n        //  Final texture has loaded. Start er up!\n        startApp();\n    }\n}\n\n/**\n *  Called when inits are successful and all assets have loaded\n */\nfunction startApp()\n{\n    gl.disable(gl.CULL_FACE);\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    //gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    //  Create a SpriteBatch\n    batch = new SpriteBatch({\n        lightDir,\n        gl,\n        bufsize: 240,\t// Number of sprites to allocate for\n        shader: shader,\n        texture: texDiffuse,\n        normap: texNormals\n    });\n\n    var quad = new Quad({});\n    var monkey, sprite;\n    var x, y;\n\n    //  Fill an array of monkeys, each with its own sprite instance\n    monkeys = [];\n\n\n    // Add a sprite to the batch\n    sprite = new Sprite({\n        x:0,y:0, rot:0,\n        quad:quad\n    });\n    batch.addSprite(sprite);\n\n    // Make an ad-hoc monkey object\n    monkey = {\n        sprite:sprite,\n        rotVel:0//Math.random() * 4.0 - 2.0  // random rotational velocity\n    };\n    monkeys.push(monkey);\n\n\n\n    //  Watch for mouse/finger movement\n    canvas.addEventListener('mousemove', function(e) {\n        doCursorMove( e.clientX - canvasPos.x, e.clientY - canvasPos.y , e.buttons===1 );\n        e.preventDefault();\n    });\n    canvas.addEventListener('mouseup', function(e) {\n        doCursorMove( e.clientX - canvasPos.x, e.clientY - canvasPos.y, e.buttons===1 );\n        e.preventDefault();\n    });\n    canvas.addEventListener('mousedown', function(e) {\n        doCursorMove( e.clientX - canvasPos.x, e.clientY - canvasPos.y, e.buttons===1 );\n        e.preventDefault();\n    });\n    canvas.addEventListener('touchmove', function(e) {\n        doCursorMove( e.changedTouches[0].clientX - canvasPos.x, e.changedTouches[0].clientY - canvasPos.y );\n        e.preventDefault();\n    });\n    canvas.addEventListener('touchstart', function(e) {\n        doCursorMove( e.changedTouches[0].clientX - canvasPos.x, e.changedTouches[0].clientY - canvasPos.y );\n        e.preventDefault();\n    });\n\n    //  Init the previous frame time\n    prevT = Date.now();\n\n    //  All inits and setup done! Start the animation loop..\n    requestAnimFrame(doFrame);\n}\n\n/**\n *  Mouse move handler.\n *  Set light direction based on mouse position\n */\nfunction doCursorMove( x, y, reverseZ )\n{\n    var radius = canvas.width / 2.0,\n        dx = x - canvas.width / 2.0,\n        dy = -(y - canvas.height / 2.0),\n        // Pretend the mouse is intersecting a sphere, it's height would be\n        // where the mouse intersects the sphere\n        distance2D = Math.sqrt(dx * dx + dy * dy);\n\n    if ( distance2D > radius ) {\n        distance2D = radius;\n    }\n    var dz = Math.sin(\n                            Math.PI / 2.0 *\n                            (radius - distance2D )/radius\n                        ) * radius;\n\n    var len = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        /*,\n        dz =\n        len = */\n    if( len > 0.0 )\n    {\n        // normalize xy\n        var s = 1.0 / len;\n        dx *= s;\n        dy *= s;\n        dz *= s;\n    }\n    else\n    {\n        dx = 1.0;\n        dy = 0.0;\n        dz = 0.0;\n    }\n    lightDir[0] = dx;\n    lightDir[1] = dy;\n    lightDir[2] = reverseZ ? -dz: dz;\n}\n\n/**\n *  Render loop callback function\n */\nfunction doFrame()\n{\n    var curT = Date.now();\n    var dt = curT - prevT;\n    if( dt > 100 )\n        dt = 100;\t// sanity check - in case of extra long pause or sleep\n    update(dt);\n    render();\n    prevT = curT;  // remember timestamp for next frame\n    requestAnimFrame(doFrame);\n}\n\n/**\n *  Render everything - the SpriteBatch does all the work for us.\n */\nfunction render()\n{\n    batch.render();\n\n    // Draw light direction arrow. Based off of this approach\n    // https://stackoverflow.com/a/6333775\n    const length = lightDirectionCanvas.width/2;\n    const toX = lightDirectionCanvas.width/2;\n    const toY = lightDirectionCanvas.height/2;\n    const fromX = toX + lightDir[0] * length;\n    const fromY = toY - lightDir[1] * length;\n    const deltaX = toX - fromX;\n    const deltaY = toY - fromY;\n    const lineLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const arrowHeadLength = Math.min(10, lineLength);\n    const angle = Math.atan2(toY-fromY,toX-fromX);\n\n    lightDirectionCtx.clearRect( 0, 0, lightDirectionCanvas.width, lightDirectionCanvas.height );\n\n    lightDirectionCtx.strokeStyle = \"rgba( 255, 255, 255, 0.8 )\";\n    lightDirectionCtx.lineWidth = 2;\n    lightDirectionCtx.beginPath();\n    lightDirectionCtx.moveTo(fromX, fromY);\n    lightDirectionCtx.lineTo(toX, toY);\n    lightDirectionCtx.lineTo(toX-arrowHeadLength*Math.cos(angle-Math.PI/6),toY-arrowHeadLength*Math.sin(angle-Math.PI/6));\n    lightDirectionCtx.moveTo(toX, toY);\n    lightDirectionCtx.lineTo(toX-arrowHeadLength*Math.cos(angle+Math.PI/6),toY-arrowHeadLength*Math.sin(angle+Math.PI/6));\n    lightDirectionCtx.stroke();\n}\n\nfunction drawCircle(centerX, centerY, radius){\n    lightDirectionCtx.clearRect( 0, 0, lightDirectionCanvas.width, lightDirectionCanvas.height);\n    lightDirectionCtx.beginPath();\n    lightDirectionCtx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    lightDirectionCtx.fillStyle = 'white';\n    lightDirectionCtx.fill();\n}\n\n/**\n *  Update logic by elapsed time\n */\nfunction update( dt )\n{\n    var ft = dt * 0.001;\t// convert delta T to seconds\n    var monkey, i, n = monkeys.length;\n    // update each monkey\n    for( i = 0; i < n; ++i )\n    {\n        monkey = monkeys[i];\n        // spin the monkey using its own rotational velocity\n        monkey.sprite.rot += ft * monkey.rotVel;\n    }\n}\n\ninit();\n"
  ]
}